{"version":3,"sources":["helper/catHandler.ts","component/cat/item.tsx","component/cat/index.tsx","component/Test.tsx","component/home.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["getStored","cat","localStorage","getItem","JSON","parse","Item","catToDisplay","src","url","alt","id","IndexCat","howMuch","useState","cats","setCats","useEffect","Axios","get","params","limit","then","value","console","log","storedCat","concat","length","slice","Math","max","setItem","stringify","addToStore","data","catch","map","TestDisplay","cont","setCont","onClick","home","className","process","href","target","rel","App","to","path","element","Test","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.bcf2d8e6.chunk.js","sourcesContent":["export interface ICat {\n  id: string;\n  url: string;\n  width: number;\n  height: number;\n}\n\nexport const getStored = () => {\n  var cat = localStorage.getItem(\"cat\");\n  if (cat !== null) return JSON.parse(cat) as ICat[];\n  else return [] as ICat[];\n};\n\nexport const addToStore = (cat: ICat[]) => {\n  var storedCat: ICat[] = getStored().concat(cat);\n  if (storedCat.length > 50)\n    storedCat.slice(Math.max(storedCat.length - 50, 0));\n  localStorage.setItem(\"cat\", JSON.stringify(storedCat));\n};\n","import React from \"react\";\nimport { ICat } from \"../../helper/catHandler\";\n\nconst Item = ({ catToDisplay }: { catToDisplay: ICat }) => {\n  return <img src={catToDisplay.url} alt={catToDisplay.id} />;\n};\n\nexport default Item;\n","import React, { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport { ICat, getStored, addToStore } from \"../../helper/catHandler\";\nimport Item from \"./item\";\n\nconst IndexCat = ({ howMuch }: { howMuch: number }) => {\n  const [cats, setCats] = useState<ICat[]>([]);\n  useEffect(() => {\n    Axios.get(\"https://api.thecatapi.com/v1/images/search\", {\n      params: {\n        limit: howMuch,\n      },\n    })\n      .then((value) => {\n        console.log(value);\n        addToStore(value.data);\n        return value.data;\n      })\n      .catch(() => {\n        return getStored();\n      })\n      .then((value) => {\n        setCats(value);\n      });\n  }, [howMuch]);\n\n  return (\n    <>\n      {cats.map((cat) => (\n        <Item key={cat.id} catToDisplay={cat} />\n      ))}\n    </>\n  );\n};\n\nexport default IndexCat;\n","import React, { useState } from \"react\";\nimport Cat from './cat'\n\nconst TestDisplay = () => {\n  const [cont, setCont] = useState(0);\n  console.log(cont)\n  return (\n    <div onClick={()=>setCont(cont+1)}>\n      <h1>Hello You</h1>\n      {cont > 0 && <h1>Want some cats?</h1>}\n      {cont > 30 && <h1>/!\\ Warning only the last 50 cat are available offline</h1>}\n      {cont >1 && <Cat howMuch={cont} />}\n    </div>\n  );\n};\n\nexport default TestDisplay;\n","import React from \"react\";\n\nconst home = () => {\n  return (\n    <header className=\"App-header\">\n      <img\n        src={`${process.env.PUBLIC_URL}/logo.svg`}\n        className=\"App-logo\"\n        alt=\"logo\"\n      />\n      <p>Wanna Learn PWA ?</p>\n      <a\n        className=\"App-link\"\n        href=\"https://github.com/batleforc/PresPwa\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Learn PWA\n      </a>\n    </header>\n  );\n};\n\nexport default home;\n","import React from 'react';\nimport {\n  Route,\n  Link,\n  Routes\n} from \"react-router-dom\";\nimport './App.css';\nimport TestDisplay from './component/Test';\nimport Home from './component/home';\n\nconst App = ()=> {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <nav>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/test\">Test</Link>\n        </nav>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/test\" element={<TestDisplay />} />\n        </Routes>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}